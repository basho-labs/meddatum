#!/usr/bin/env escript

-include_lib("eunit/include/eunit.hrl").

-type hl7_datatype() :: {string(),
                         atom() | {maybe, atom()},
                         non_neg_integer(),
                         string()}.

%% code generation script
%% ERL_LIBS=deps priv/generate hoge.csv > include/hl7_types.hrl

main([Filename])->
    {ok,Path} = file:get_cwd(),
    code:add_pathz(Path ++ "/ebin"),
    io:setopts([{encoding,utf8}]),
    {ok, Lines} = japanese:read_file(Filename),
    F = fun({newline, NewLine}, Ctx0) ->
                parse_line(NewLine, Ctx0);
           (_, Ctx0) ->
                parse_line([[]], Ctx0)
        end,
    io:format("%% Automatically generated by 'generate', from ~s~n",
              [Filename]),
    {ok, {nothing, DataTypes}} = ecsv:process_csv_string_with(lists:flatten(Lines), F,
                                                             {nothing, []}),
    io:format("-define(HL7_TYPES, [~n"),
    [io:format("                   {\"~s\", ?HL7_~s},~n", [Name,Name])|| Name <- lists:reverse(tl(DataTypes))],
    io:format("                   {\"~s\", ?HL7_~s}~n", [hd(DataTypes), hd(DataTypes)]),
    io:format("                   ]).~n"),
    ok.


%%  lp []       lp []                lp "ZE2-n"
%% nothing -> {ready, Name} -> {processing, Lines} -> nothing
%%         "ZE2", ...     "ZE2-n"..               []                            

-type state() :: nothing | {ready, string()} | {processing, [[string()]]}.

-spec parse_line([[string()]], {state(), [hl7_datatype()]}) ->
                        {state(), [hl7_datatype()]}.
parse_line([[]|_],  {nothing, Types}) -> {nothing, Types};
parse_line([Str|_], {nothing, Types}) ->
    case length(Str) of
        3 -> {{ready,Str}, [Str|Types]};
        _ -> {nothing, Types}
    end;
parse_line([[]|_], {{ready, Str}, Types}) -> {{ready, Str},Types};
parse_line(Line,   {{ready, Str}, Types}) ->
    case string:substr(hd(Line), 1, 3) of
        Str -> {{processing, [Line, [Str]]}, Types};
        _O -> error({unexpected, _O})
    end;
parse_line([[]|_], {{processing, Lines}, Types}) ->
    ok = hl7_types:parse(lists:reverse(Lines)),
    {nothing, Types};
parse_line(Line,   {{processing, Lines}, Types}) ->
    {{processing, [Line|Lines]}, Types}.


        
    
    
    

